#!/bin/sh
#
#

CRUCIBLE_ENV="${CRUCIBLE_ENV:-development}"

if [ "${CRUCIBLE_ENV}" == "development" ]; then
  # compile the solidity code
  truffle compile --network ${CRUCIBLE_ENV} && \
    ./scripts/devchain && \
    truffle migrate --network ${CRUCIBLE_ENV}

  ret=$?
  if [ ${ret} -ne 0 ]; then
    echo "Error trying to deploy ${CRUCIBLE_ENV}"
    exit ${ret}
  else
    # clean exit
    echo "${CRUCIBLE_ENV} deployed"
    exit 0
  fi
fi

#
# everything past this point is a real environment
#
DOCKER=`cat ./docker`

if [ "${DOCKER}" == "false" ]; then
  if [ "${CRUCIBLE_ENV}" == "production" ]; then
    id=`docker ps | grep r.cfcr.io/godsflaw/vault:crucile-production-sealed | awk '{ print $1 }'`
    if [ "${id}" == "" ]; then
      docker run -p8200:8200 r.cfcr.io/godsflaw/vault:crucile-production-sealed &
      sleep 10
    fi
  else
    id=`docker ps | grep r.cfcr.io/godsflaw/vault:crucile-staging-sealed | awk '{ print $1 }'`
    if [ "${id}" == "" ]; then
      docker run -p8200:8200 r.cfcr.io/godsflaw/vault:crucile-staging-sealed &
      sleep 10
    fi
  fi
fi

# unseal the vault
./scripts/vault_unseal.js

# Use the following command to create the contract for the first time.
# Make sure you run ./env-staging or ./env-production first.  You should
# then set FOUNDRY_PROXY to the address from 'zos create'.
# zos add Foundry
# zos push --network staging
# zos create Foundry --init initialize \
#   --args "0x7af77b0d604D13a41e6d0f2175D8a61d5f1115C9" --network staging
#

OLD_VERSION=`egrep '^  "version":' ./zos.${CRUCIBLE_ENV}.json | awk -F' ' '{ print $2 }' | sed -E 's/",?//g'`
NEW_VERSION=`egrep '^  "version":' ./zos.json | awk -F' ' '{ print $2 }' | sed -E 's/",?//g'`

# This will push and update our contracts in staging, prod, and other test
# networks.  The only changes that go to other tests networks are version
# bumps.
if [ "${OLD_VERSION}" != "${NEW_VERSION}" ]; then
  echo "version changed, updating contracts on chain..."

  if [ "${DOCKER}" == "true" ]; then
    mkdir -p ~/.ssh && \
      chmod 700 ~/.ssh && \
      cp -p ./.github/known_hosts ~/.ssh/known_hosts && \
      ./scripts/vault_get_deploy_key.js > ~/.ssh/id_rsa && \
      chmod 600 ~/.ssh/id_rsa && \
      git remote set-url origin git@github.com:godsflaw/crucible.git && \
      git config --global user.name "Crucible Deploy" && \
      git config --global user.email chris@dod.net && \
      git remote update && \
      git checkout dev && \
      git reset --hard origin/dev && \
      zos push --network ${CRUCIBLE_ENV} && \
      sleep 120 && \
      zos update Foundry --network ${CRUCIBLE_ENV}

    ret=$?
    if [ ${ret} -ne 0 ]; then
      echo "Error trying to deploy ${CRUCIBLE_ENV}"
    fi
  else
    # at the end of this section we can exit, becasue we don't want to commit
    zos push --network ${CRUCIBLE_ENV} && \
      sleep 120 && \
      zos update Foundry --network ${CRUCIBLE_ENV}

    ret=$?
    if [ ${ret} -ne 0 ]; then
      echo "Error trying to deploy ${CRUCIBLE_ENV}"
      exit ${ret}
    else
      echo "${CRUCIBLE_ENV} deployed"
      exit 0
    fi
  fi
else
  # clean exit
  echo "${CRUCIBLE_ENV} already up-to-date, nothing to deploy"
  exit 0
fi

# Any changes, pass or fail, we should push back to the repo.
# We can assume that this portion of the deploy script will only run
# inside docker.
MODIFIED=`git status ./zos.${CRUCIBLE_ENV}.json | grep modified|wc -l`
if [ ${MODIFIED} -gt 0 ]; then
  git add ./zos.${CRUCIBLE_ENV}.json && \
    git commit -m"${CRUCIBLE_ENV}-${NEW_VERSION}: migration changes"

  ret=$?
  if [ ${ret} -ne 0 ]; then
    echo "Error trying to commit ./zos.${CRUCIBLE_ENV}.json"
    exit ${ret}
  fi

  echo "pushing zos environment for ${CRUCIBLE_ENV} upstream..."
  if [ "${CRUCIBLE_ENV}" == "production" ]; then
    # back commit updates to the zos prod env to the other networks
    git push origin dev:master && \
      git push origin dev && \
      git push origin dev:ropsten && \
      git push origin dev:kovan
  elif [ "${CRUCIBLE_ENV}" == "ropsten" ] || \
       [ "${CRUCIBLE_ENV}" == "kovan" ]; then
    # Commit up any changes to this environment, then back to staging
    git push origin dev:"${CRUCIBLE_ENV}" && \
      git push origin dev
  elif [ "${CRUCIBLE_ENV}" == "staging" ]; then
    # This will commit the zos env file changes to dev, but also fire off
    # the deploy to other test networks.
    git push origin dev && \
      git push origin dev:ropsten && \
      git push origin dev:kovan
  else
    echo "Error unknown environment ${CRUCIBLE_ENV}"
  fi

  ret=$?
  if [ ${ret} -ne 0 ]; then
    echo "Error trying to commit ./zos.${CRUCIBLE_ENV}.json"
    exit ${ret}
  fi

  rm ~/.ssh/id_rsa
else
  echo "deploy of ${CRUCIBLE_ENV} failed with no modified files"
fi

# We want to end execution here since we had to re-commit changes and
# another test run is going to fire off with deployed assets.
exit 1
